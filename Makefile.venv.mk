# file generated by <https://github.com/g3w-suite/makefiles/>
# don't change, don't track in version control

##
# USAGE: include it your main Makefile as follows:
##
# install: Makefile.venv.mk
#
# Makefile.venv.mk:
# 	wget https://raw.githubusercontent.com/g3w-suite/makefiles/master/$@
#
# include Makefile.venv.mk
##

PKG_NAME ?=      $(CURDIR_NAME)
PKG_DESC ?=      Insert project description here
CURDIR_NAME ?=   $(notdir $(CURDIR))

# ANSI color codes
H1__ ?=          "\n\n\033[0;32m\#\#\# "
__H1 ?=          " \#\#\# \033[0m\n"

# Python command used to create the venv.
GLOBAL_PYTHON ?= python3

# Python commands used within the venv.
VENV_ROOT ?=     venv
VENV_BIN ?=      $(VENV_ROOT)/bin
VENV_PIP ?=      $(VENV_BIN)/pip3
VENV_PYTHON ?=   $(VENV_BIN)/python

# pyproject.toml
define PYPROJECT_TEMPLATE
[build-system]
build-backend   = "setuptools.build_meta"
requires        = [
    "setuptools>=45",
    "setuptools_scm[toml]>=6.2"
]

[project]
name            = "$(PKG_NAME)"
dynamic         = [
    "version",              # retrieve package version from git tags
    "dependencies",         # retrieve package dependencies from requirements.txt
    "optional-dependencies" # retrieve development dependencies from requirements_dev.txt
] 
authors         = [ { name = "Gis3w snc", email = "info@gis3w.it" } ]
description     = "$(PKG_DESC)"
readme          = "README.md"
license         = { text = "Mozilla Public License 2.0 (MPL 2.0)" }
classifiers     = [
    "Development Status :: 3 - Beta",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries",
]
# requires-python = ">=3.10"

[project.urls]
"Homepage"      = "https://github.com/g3w-suite/$(PKG_NAME)"
"Bug Tracker"   = "https://github.com/g3w-suite/$(PKG_NAME)/issues"

[tool.setuptools]
packages        = ["$(PKG_NAME)"]
package-dir     = { $(PKG_NAME) = "$(PKG_NAME)" }

[tool.setuptools.dynamic]
dependencies    = { file = ["requirements.txt"] }

[tool.setuptools.dynamic.optional-dependencies]
dev  = { file = ["requirements_dev.txt"] }

[tool.setuptools_scm]
fallback_version = "0.0.0-alpha.0"
write_to         = "_version.py" # hardcode version number in a file
#
# Or alternatively retrieve it at runtime:
# https://github.com/pypa/setuptools_scm/#retrieving-package-version-at-runtime
endef
export PYPROJECT_TEMPLATE

# .gitignore
define GITIGNORE_TEMPLATE
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Python setuptools
*.egg
*.egg-info/
*.eggs

# Python virtualenv
.venv/
venv/

# PyPi related files
.coverage
dist/
build/

_version.py
endef
export GITIGNORE_TEMPLATE

##
# Initialize a new python virtual env
##
venv: clean-venv pkg-files
	@echo $(H1__)Creating a new Python environment: $(VENV_ROOT) $(__H1)

	$(GLOBAL_PYTHON) -m venv --system-site-packages --prompt $(PKG_NAME) $(VENV_ROOT)

	@echo
	@echo done.
	@echo
	@echo To active it manually, run:
	@echo
	@echo "    . $(VENV_BIN)/activate"
	@echo
	@echo '(learn more: https://docs.python.org/3/library/venv.html)'
	@echo

	@$(MAKE) install-reqs

##
# Install python package dependencies:
#
# - required for publishing to the Python Package Index (pip3, build, twine)
# - required for local development (requirements_dev.txt and requirements.txt)
# - and the package itself in editable mode for local development
##
install-reqs:
	@echo $(H1__)Updating packaging tools$(__H1)
	$(VENV_PIP) install --upgrade build twine

	@echo $(H1__)Installing dev requirements$(__H1)
	-$(VENV_PIP) install --upgrade '.[dev]'

	@echo $(H1__)Installing $(PKG_NAME) package$(__H1)
	$(VENV_PIP) install --upgrade --editable .

	@echo

##
# Uninstall current package (disable editable mode)
##
uninstall:
	@echo $(H1__)Uninstalling $(PKG_NAME) package$(__H1)
	- $(VENV_PIP) uninstall --yes $(PKG_NAME)
	@echo

	@echo "Verifyingâ€¦"
	cd .. && ! $(VENV_PYTHON) -m $(PKG_NAME) --version
	@echo

	@echo "Done"
	@echo

.PHONY: build
##
# Generate python files for PyPi
##
build:
	rm -rf build/ dist/
	$(VENV_PYTHON) -m build

##
# Publish python package to PyPi
##
publish: build
	$(VENV_BIN)/twine check dist/*
	$(VENV_BIN)/twine upload dist/*

##
# Clear python virtual env
##
clean-venv:
	@echo $(H1__)Clearing $(VENV_ROOT) $(__H1)

	rm -rf $(VENV_ROOT)
	rm -rf *.egg dist build .coverage .cache .pytest_cache $(PKG_NAME).egg-info _version.py
	find . -name '__pycache__' -delete -o -name '*.pyc' -delete

	@echo "Done"
	@echo

##
# Ensure that all the files needed for a PyPi package are there
##
pkg-files: requirements.txt requirements_dev.txt pyproject.toml README.md .gitignore LICENSE
	@:

requirements.txt requirements_dev.txt README.md:
	touch $@

pyproject.toml:
	echo "$$PYPROJECT_TEMPLATE" > $@

.gitignore:
	echo "$$GITIGNORE_TEMPLATE" > $@

LICENSE:
	wget https://raw.githubusercontent.com/g3w-suite/makefiles/master/$@